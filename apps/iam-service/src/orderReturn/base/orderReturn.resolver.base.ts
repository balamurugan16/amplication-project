/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOrderReturnArgs } from "./CreateOrderReturnArgs";
import { UpdateOrderReturnArgs } from "./UpdateOrderReturnArgs";
import { DeleteOrderReturnArgs } from "./DeleteOrderReturnArgs";
import { OrderReturnCountArgs } from "./OrderReturnCountArgs";
import { OrderReturnFindManyArgs } from "./OrderReturnFindManyArgs";
import { OrderReturnFindUniqueArgs } from "./OrderReturnFindUniqueArgs";
import { OrderReturn } from "./OrderReturn";
import { Customer } from "../../customer/base/Customer";
import { Order } from "../../order/base/Order";
import { OrderReturnService } from "../orderReturn.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OrderReturn)
export class OrderReturnResolverBase {
  constructor(
    protected readonly service: OrderReturnService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrderReturn",
    action: "read",
    possession: "any",
  })
  async _orderReturnsMeta(
    @graphql.Args() args: OrderReturnCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrderReturn])
  @nestAccessControl.UseRoles({
    resource: "OrderReturn",
    action: "read",
    possession: "any",
  })
  async orderReturns(
    @graphql.Args() args: OrderReturnFindManyArgs
  ): Promise<OrderReturn[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrderReturn, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrderReturn",
    action: "read",
    possession: "own",
  })
  async orderReturn(
    @graphql.Args() args: OrderReturnFindUniqueArgs
  ): Promise<OrderReturn | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderReturn)
  @nestAccessControl.UseRoles({
    resource: "OrderReturn",
    action: "create",
    possession: "any",
  })
  async createOrderReturn(
    @graphql.Args() args: CreateOrderReturnArgs
  ): Promise<OrderReturn> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        customerId: args.data.customerId
          ? {
              connect: args.data.customerId,
            }
          : undefined,

        orderId: args.data.orderId
          ? {
              connect: args.data.orderId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderReturn)
  @nestAccessControl.UseRoles({
    resource: "OrderReturn",
    action: "update",
    possession: "any",
  })
  async updateOrderReturn(
    @graphql.Args() args: UpdateOrderReturnArgs
  ): Promise<OrderReturn | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          customerId: args.data.customerId
            ? {
                connect: args.data.customerId,
              }
            : undefined,

          orderId: args.data.orderId
            ? {
                connect: args.data.orderId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrderReturn)
  @nestAccessControl.UseRoles({
    resource: "OrderReturn",
    action: "delete",
    possession: "any",
  })
  async deleteOrderReturn(
    @graphql.Args() args: DeleteOrderReturnArgs
  ): Promise<OrderReturn | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customerId",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async resolveFieldCustomerId(
    @graphql.Parent() parent: OrderReturn
  ): Promise<Customer | null> {
    const result = await this.service.getCustomerId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "orderId",
  })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async resolveFieldOrderId(
    @graphql.Parent() parent: OrderReturn
  ): Promise<Order | null> {
    const result = await this.service.getOrderId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
